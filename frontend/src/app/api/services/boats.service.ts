/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BoatCreateRequest } from '../models/boat-create-request';
import { BoatData } from '../models/boat-data';
import { BoatDetail } from '../models/boat-detail';
import { createBoat } from '../fn/boats/create-boat';
import { CreateBoat$Params } from '../fn/boats/create-boat';
import { deleteBoat } from '../fn/boats/delete-boat';
import { DeleteBoat$Params } from '../fn/boats/delete-boat';
import { getBoat } from '../fn/boats/get-boat';
import { GetBoat$Params } from '../fn/boats/get-boat';
import { listBoats } from '../fn/boats/list-boats';
import { ListBoats$Params } from '../fn/boats/list-boats';
import { updateBoat } from '../fn/boats/update-boat';
import { UpdateBoat$Params } from '../fn/boats/update-boat';

@Injectable({ providedIn: 'root' })
export class BoatsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listBoats()` */
  static readonly ListBoatsPath = '/boats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listBoats()` instead.
   *
   * This method doesn't expect any request body.
   */
  listBoats$Response(params?: ListBoats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BoatDetail>>> {
    return listBoats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listBoats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listBoats(params?: ListBoats$Params, context?: HttpContext): Observable<Array<BoatDetail>> {
    return this.listBoats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BoatDetail>>): Array<BoatDetail> => r.body)
    );
  }

  /** Path part for operation `createBoat()` */
  static readonly CreateBoatPath = '/boats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBoat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBoat$Response(params: CreateBoat$Params, context?: HttpContext): Observable<StrictHttpResponse<BoatCreateRequest>> {
    return createBoat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBoat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBoat(params: CreateBoat$Params, context?: HttpContext): Observable<BoatCreateRequest> {
    return this.createBoat$Response(params, context).pipe(
      map((r: StrictHttpResponse<BoatCreateRequest>): BoatCreateRequest => r.body)
    );
  }

  /** Path part for operation `getBoat()` */
  static readonly GetBoatPath = '/boats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBoat()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBoat$Response(params: GetBoat$Params, context?: HttpContext): Observable<StrictHttpResponse<BoatData>> {
    return getBoat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBoat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBoat(params: GetBoat$Params, context?: HttpContext): Observable<BoatData> {
    return this.getBoat$Response(params, context).pipe(
      map((r: StrictHttpResponse<BoatData>): BoatData => r.body)
    );
  }

  /** Path part for operation `updateBoat()` */
  static readonly UpdateBoatPath = '/boats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBoat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBoat$Response(params: UpdateBoat$Params, context?: HttpContext): Observable<StrictHttpResponse<BoatData>> {
    return updateBoat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBoat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBoat(params: UpdateBoat$Params, context?: HttpContext): Observable<BoatData> {
    return this.updateBoat$Response(params, context).pipe(
      map((r: StrictHttpResponse<BoatData>): BoatData => r.body)
    );
  }

  /** Path part for operation `deleteBoat()` */
  static readonly DeleteBoatPath = '/boats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBoat()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBoat$Response(params: DeleteBoat$Params, context?: HttpContext): Observable<StrictHttpResponse<BoatData>> {
    return deleteBoat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBoat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBoat(params: DeleteBoat$Params, context?: HttpContext): Observable<BoatData> {
    return this.deleteBoat$Response(params, context).pipe(
      map((r: StrictHttpResponse<BoatData>): BoatData => r.body)
    );
  }

}

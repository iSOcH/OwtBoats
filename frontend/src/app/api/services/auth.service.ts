/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AccessTokenResponse } from '../models/access-token-response';
import { authForgotPasswordPost } from '../fn/auth/auth-forgot-password-post';
import { AuthForgotPasswordPost$Params } from '../fn/auth/auth-forgot-password-post';
import { authLoginPost } from '../fn/auth/auth-login-post';
import { AuthLoginPost$Params } from '../fn/auth/auth-login-post';
import { authManage2FaPost } from '../fn/auth/auth-manage-2-fa-post';
import { AuthManage2FaPost$Params } from '../fn/auth/auth-manage-2-fa-post';
import { authManageInfoGet } from '../fn/auth/auth-manage-info-get';
import { AuthManageInfoGet$Params } from '../fn/auth/auth-manage-info-get';
import { authManageInfoPost } from '../fn/auth/auth-manage-info-post';
import { AuthManageInfoPost$Params } from '../fn/auth/auth-manage-info-post';
import { authRefreshPost } from '../fn/auth/auth-refresh-post';
import { AuthRefreshPost$Params } from '../fn/auth/auth-refresh-post';
import { authRegisterPost } from '../fn/auth/auth-register-post';
import { AuthRegisterPost$Params } from '../fn/auth/auth-register-post';
import { authResendConfirmationEmailPost } from '../fn/auth/auth-resend-confirmation-email-post';
import { AuthResendConfirmationEmailPost$Params } from '../fn/auth/auth-resend-confirmation-email-post';
import { authResetPasswordPost } from '../fn/auth/auth-reset-password-post';
import { AuthResetPasswordPost$Params } from '../fn/auth/auth-reset-password-post';
import { InfoResponse } from '../models/info-response';
import { mapIdentityApiAuthConfirmEmail } from '../fn/auth/map-identity-api-auth-confirm-email';
import { MapIdentityApiAuthConfirmEmail$Params } from '../fn/auth/map-identity-api-auth-confirm-email';
import { TwoFactorResponse } from '../models/two-factor-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authRegisterPost()` */
  static readonly AuthRegisterPostPath = '/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRegisterPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegisterPost$Response(params: AuthRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRegisterPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegisterPost(params: AuthRegisterPost$Params, context?: HttpContext): Observable<void> {
    return this.authRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authLoginPost()` */
  static readonly AuthLoginPostPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authLoginPost$Response(params: AuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenResponse>> {
    return authLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authLoginPost(params: AuthLoginPost$Params, context?: HttpContext): Observable<AccessTokenResponse> {
    return this.authLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenResponse>): AccessTokenResponse => r.body)
    );
  }

  /** Path part for operation `authRefreshPost()` */
  static readonly AuthRefreshPostPath = '/auth/refresh';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRefreshPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRefreshPost$Response(params: AuthRefreshPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenResponse>> {
    return authRefreshPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRefreshPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRefreshPost(params: AuthRefreshPost$Params, context?: HttpContext): Observable<AccessTokenResponse> {
    return this.authRefreshPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenResponse>): AccessTokenResponse => r.body)
    );
  }

  /** Path part for operation `mapIdentityApiAuthConfirmEmail()` */
  static readonly MapIdentityApiAuthConfirmEmailPath = '/auth/confirmEmail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mapIdentityApiAuthConfirmEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  mapIdentityApiAuthConfirmEmail$Response(params: MapIdentityApiAuthConfirmEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return mapIdentityApiAuthConfirmEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mapIdentityApiAuthConfirmEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mapIdentityApiAuthConfirmEmail(params: MapIdentityApiAuthConfirmEmail$Params, context?: HttpContext): Observable<void> {
    return this.mapIdentityApiAuthConfirmEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authResendConfirmationEmailPost()` */
  static readonly AuthResendConfirmationEmailPostPath = '/auth/resendConfirmationEmail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authResendConfirmationEmailPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authResendConfirmationEmailPost$Response(params: AuthResendConfirmationEmailPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authResendConfirmationEmailPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authResendConfirmationEmailPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authResendConfirmationEmailPost(params: AuthResendConfirmationEmailPost$Params, context?: HttpContext): Observable<void> {
    return this.authResendConfirmationEmailPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authForgotPasswordPost()` */
  static readonly AuthForgotPasswordPostPath = '/auth/forgotPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authForgotPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authForgotPasswordPost$Response(params: AuthForgotPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authForgotPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authForgotPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authForgotPasswordPost(params: AuthForgotPasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.authForgotPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authResetPasswordPost()` */
  static readonly AuthResetPasswordPostPath = '/auth/resetPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authResetPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authResetPasswordPost$Response(params: AuthResetPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authResetPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authResetPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authResetPasswordPost(params: AuthResetPasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.authResetPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authManage2FaPost()` */
  static readonly AuthManage2FaPostPath = '/auth/manage/2fa';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authManage2FaPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authManage2FaPost$Response(params: AuthManage2FaPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TwoFactorResponse>> {
    return authManage2FaPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authManage2FaPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authManage2FaPost(params: AuthManage2FaPost$Params, context?: HttpContext): Observable<TwoFactorResponse> {
    return this.authManage2FaPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TwoFactorResponse>): TwoFactorResponse => r.body)
    );
  }

  /** Path part for operation `authManageInfoGet()` */
  static readonly AuthManageInfoGetPath = '/auth/manage/info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authManageInfoGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  authManageInfoGet$Response(params?: AuthManageInfoGet$Params, context?: HttpContext): Observable<StrictHttpResponse<InfoResponse>> {
    return authManageInfoGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authManageInfoGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authManageInfoGet(params?: AuthManageInfoGet$Params, context?: HttpContext): Observable<InfoResponse> {
    return this.authManageInfoGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<InfoResponse>): InfoResponse => r.body)
    );
  }

  /** Path part for operation `authManageInfoPost()` */
  static readonly AuthManageInfoPostPath = '/auth/manage/info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authManageInfoPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authManageInfoPost$Response(params: AuthManageInfoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<InfoResponse>> {
    return authManageInfoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authManageInfoPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authManageInfoPost(params: AuthManageInfoPost$Params, context?: HttpContext): Observable<InfoResponse> {
    return this.authManageInfoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<InfoResponse>): InfoResponse => r.body)
    );
  }

}
